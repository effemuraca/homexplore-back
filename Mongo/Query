const k = 6; // Define the value for k

// Analytics related to the buyers and sellers

// Given a city, list the neighborhoods that have had the highest increases in price per square meter in the last k months, the increase obtained, and the number of houses sold [sorted by increasing price increase]

db.SoldProperty.aggregate([
  {
    $project: {
      neighbourhood: 1,
      price: 1,
      area: 1,
      sell_date: 1,
      time_interval: {
        $cond: [
          {
            $gte: [
              "$sell_date",
              {
                $dateSubtract: {
                  startDate: new Date(),
                  unit: "month",
                  amount: k
                }
              }
            ]
          },
          "last_k_months",
          {
            $cond: [
              {
                $and: [
                  {
                    $gte: [
                      "$sell_date",
                      {
                        $dateSubtract: {
                          startDate: new Date(),
                          unit: "month",
                          amount: k * 2
                        }
                      }
                    ]
                  },
                  {
                    $lt: [
                      "$sell_date",
                      {
                        $dateSubtract: {
                          startDate: new Date(),
                          unit: "month",
                          amount: k
                        }
                      }
                    ]
                  }
                ]
              },
              "2k_to_k_months",
              null
            ]
          }
        ]
      }
    }
  },
  {
    $match: {
      time_interval: { $ne: null }
    }
  },
  {
    $addFields: {
      price_per_square_meter: { $divide: ["$price", "$area"] }
    }
  },
  {
    $group: {
      _id: { neighbourhood: "$neighbourhood", time_interval: "$time_interval" },
      avg_price_per_square_meter: { $avg: "$price_per_square_meter" },
      number_of_houses: { $sum: 1 }
    }
  },
  {
    $group: {
      _id: "$_id.neighbourhood",
      interval_prices: {
        $push: {
          time_interval: "$_id.time_interval",
          avg_price_per_square_meter: "$avg_price_per_square_meter",
          number_of_houses: "$number_of_houses"
        }
      }
    }
  },
  {
    $project: {
      neighbourhood: "$_id",
      percentage_increase: {
        $cond: [
          {
            $and: [
              { $eq: [{ $size: "$interval_prices" }, 2] }
            ]
          },
          {
            $multiply: [
              {
                $divide: [
                  {
                    $subtract: [
                      {
                        $arrayElemAt: [
                          {
                            $map: {
                              input: "$interval_prices",
                              as: "interval",
                              in: "$$interval.avg_price_per_square_meter"
                            }
                          },
                          1
                        ]
                      },
                      {
                        $arrayElemAt: [
                          {
                            $map: {
                              input: "$interval_prices",
                              as: "interval",
                              in: "$$interval.avg_price_per_square_meter"
                            }
                          },
                          0
                        ]
                      }
                    ]
                  },
                  {
                    $arrayElemAt: [
                      {
                        $map: {
                          input: "$interval_prices",
                          as: "interval",
                          in: "$$interval.avg_price_per_square_meter"
                        }
                      },
                      0
                    ]
                  }
                ]
              },
              100
            ]
          },
          null
        ]
      },
      number_of_houses_last_k_months: {
        $arrayElemAt: [
          {
            $map: {
              input: {
                $filter: {
                  input: "$interval_prices",
                  as: "interval",
                  cond: { $eq: ["$$interval.time_interval", "last_k_months"] }
                }
              },
              as: "interval",
              in: "$$interval.number_of_houses"
            }
          },
          0
        ]
      }
    }
  },
  {
    $match: {
      percentage_increase: { $ne: null }
    }
  },
  {
    $sort: {
      percentage_increase: 1
    }
  }
])

// Given a city, return the average price per square meter of houses for sale for each neighborhood [filter by apartment type, sort by descending price]
db.PropertyOnSale.aggregate([
  {
    $match: {
      type: "condo",
      city: "New York"
    }
  },
  {
    $project: {
      neighbourhood: 1,
      price_per_square_meter: { $divide: ["$price", "$area"] }
    }
  },
  {
    $group: {
      _id: "$neighbourhood",
      avg_price: { $avg: "$price_per_square_meter" }
    }
  },
  {
    $sort: {
      avg_price: -1
    }
  }
])

// Analytics for the sellers

// Given an agency and a city, return the number of houses sold and the revenue obtained in a given time period for each neighborhood  


// Given an agency and a city, return the average time to sell a house for each neighborhood


// Analytic for the superuser 

// Obtain the list of agencies sorted by revenue / number of houses sold in a given time period
db.SoldProperty.aggregate([
  {
    $match: {
      sell_date: {
        $gte: {
          $dateSubtract: {
            startDate: new Date(),
            unit: "month",
            amount: k
          }
        }
      }
    }
  },
  {
    $group: {
      _id: "$agency_name",
      revenue: { $sum: "$price" },
      number_of_houses: { $sum: 1 }
    }
  },
  {
    $addFields: {
      revenue_per_house: { $divide: ["$revenue", "$number_of_houses"] }
    }
  },
  {
    $sort: {
      revenue_per_house: -1
    }
  }
])